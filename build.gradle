plugins {
	id 'java-library'
	id 'eclipse'
	id 'com.google.protobuf' version '0.9.4'
}

group = 'etri'
version = '20.05.15'


java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.25.2"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.60.1'
        }
    }
    generateProtoTasks {
    	ofSourceSet('main').configureEach {
    		plugins {
            	grpc {}
            }
        }
    }
}

sourceSets {
	main {
		java {
			srcDirs 'src/main/antlr/generated'
			srcDirs 'build/generated/source/proto/main/grpc'
			srcDirs 'build/generated/source/proto/main/java'
		}
	}
}

repositories {
    mavenLocal()
	maven {
		url "https://repo.osgeo.org/repository/release/"
		allowInsecureProtocol = true
	}
    mavenCentral()
}

ext {
	javax_annotation_version = '1.3.2'
	grpc_version = '1.60.1'
	protobuf_version = '3.25.2'

	geotools_version = '26.1'
	jts_version = '1.17.1'
	avro_version = '1.9.2'
	snappy_java_version = '1.1.7.5'
	antlr4_version = '4.7'
	h2_version = '1.4.200'
	postgis_jdbc_version = '2.2.1'
	commons_io_version = '2.11.0'
	commons_csv_version = '1.9.0'
	mvel2_version = '2.4.14.Final'
	rxjava3_version = '3.1.8'

	junit_version = '4.12'
	mockito_version = '3.2.4'
	hamcrest_version = '1.3'
}

dependencies {
	implementation project(":utils")
	implementation project(":utilsx")
	implementation project(":utils.geo")
	
	// GeoTools & JTS
	api	"org.geotools:gt-epsg-hsql:${geotools_version}"
	api "org.geotools:gt-shapefile:${geotools_version}"
	api "org.geotools:gt-geojson:${geotools_version}"
	api "org.locationtech.jts:jts-core:${jts_version}"
	
	// Avro
	implementation "org.apache.avro:avro:${avro_version}"
	implementation "org.xerial.snappy:snappy-java:${snappy_java_version}"
	
	// ANTLR
	implementation "org.antlr:antlr4-runtime:${antlr4_version}"
	
	// H2DB
	implementation "com.h2database:h2:${h2_version}"
	
	// PostSQL
//	compile "org.postgresql:postgresql:${postgresql_version}"
	implementation "net.postgis:postgis-jdbc:${postgis_jdbc_version}"
	
	// apache commons
	implementation "commons-io:commons-io:${commons_io_version}"
	implementation "org.apache.commons:commons-csv:${commons_csv_version}"
	
	// grpc
	implementation "io.grpc:grpc-netty-shaded:${grpc_version}"
	implementation "io.grpc:grpc-stub:${grpc_version}"
	implementation "io.grpc:grpc-protobuf:${grpc_version}"
	implementation "com.google.protobuf:protobuf-java-util:${protobuf_version}"
	implementation "javax.annotation:javax.annotation-api:${javax_annotation_version}"
	
	implementation "org.mvel:mvel2:${mvel2_version}"
	implementation "io.reactivex.rxjava3:rxjava:${rxjava3_version}"
	
	testImplementation "junit:junit:${junit_version}"
	testImplementation "org.mockito:mockito-core:${mockito_version}"
	testImplementation "org.hamcrest:hamcrest-all:${hamcrest_version}"
}

task sourceJar(type: Jar) {
	// classifier 'sources'
	from sourceSets.main.allSource
}
task javadocJar(type: Jar) {
	// classifier 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
}

eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'build/classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
						def entry = values.first()
						if ( entry.kind == 'src' ) {
							entry.includes = []
							entry.excludes = []
						}
						int index = cp.entries.indexOf entry
						cp.entries.removeAll values
						cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						if ( entry.path.contains('/test/') ) {
							entry.output = 'build/test_classes'
						}
						else {
							entry.output = 'build/classes'
						}
					}
				}
			}
		}
	}
}
